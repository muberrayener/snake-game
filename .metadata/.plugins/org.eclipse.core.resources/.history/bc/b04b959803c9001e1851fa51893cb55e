package snake_game;

import java.util.Random;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JPanel;
import javax.swing.Timer;

@SuppressWarnings("serial")
public class GPanel extends JPanel implements ActionListener {

	static final int SCREEN_WIDTH = 500;
	static final int SCREEN_HEIGHT = 500;
	static final int UNIT_SIZE = 20;
	static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE*UNIT_SIZE);
	int DELAY = 150;
	int body = 5;
	int baitX;
	int baitY;
	int baitEaten = 0;
	final int x[] = new int[GAME_UNITS /2];
	final int y[] = new int[GAME_UNITS /2];
	char direction = 'R';
	boolean running = false;
	Random random;
	Timer timer;
	
	GPanel(){
		random = new Random();
		this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
		this.setBackground(Color.gray);
		this.setFocusable(true);
		this.addKeyListener(new MyKeyAdapter());
		startGame();
	}
	
	public void makeMesh(Graphics g) {
		for(int i=0;i<SCREEN_HEIGHT/UNIT_SIZE;i++) {
			g.drawLine(i*UNIT_SIZE, 0, i*UNIT_SIZE, SCREEN_HEIGHT);
			g.drawLine(0, i*UNIT_SIZE, SCREEN_WIDTH, i*UNIT_SIZE);
		}
	}

	public void startGame() {
		newBait();
		running = true;
		timer = new Timer(DELAY,this);
		timer.start();
	
	}
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		draw(g);
	}
	
	public void draw(Graphics g) {
		
		if(running) {
			makeMesh(g);
			g.setColor(Color.red);
			g.fillOval(baitX, baitY, UNIT_SIZE, UNIT_SIZE);
		
			for(int i = 0; i<body;i++) {
				if(i==0) {
					g.setColor(new Color(0,220,150));
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);	
				}
				else {
					g.setColor(Color.green);
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
			}
			
		}
		else {
			gameOver(g);
		}
		g.setColor(Color.white);
		g.setFont(new Font("Ink Free", Font.BOLD, 20));
		FontMetrics metrics= getFontMetrics(g.getFont());
		g.drawString("SCORE: "+baitEaten, (SCREEN_WIDTH-metrics.stringWidth("SCORE"))/2, UNIT_SIZE);
	}
	
	
	public void newBait() {
		baitX=random.nextInt((int)SCREEN_WIDTH/UNIT_SIZE)*UNIT_SIZE;
		baitY=random.nextInt((int)SCREEN_HEIGHT/UNIT_SIZE)*UNIT_SIZE;
	}
	
	public void move() {
		for(int i = body;i>0;i--) {
			x[i] = x[i-1];
			y[i] = y[i-1];
		}
		switch (direction) {
		case 'R':
			x[0] = x[0]+UNIT_SIZE;
			break;
		case 'L':
			x[0] = x[0]-UNIT_SIZE;
			break;
		case 'U':
			y[0] = y[0]-UNIT_SIZE;
			break;
		case 'D':
			y[0] = y[0]+UNIT_SIZE;
			break;
		}
	}
	
	public void checkCollision() {
		for(int i = body;i>0;i--) {
			if(x[0] == x[i] && y[0] == y[i]) {
				running = false;
			}
		}
		
		if(x[0]>SCREEN_WIDTH-UNIT_SIZE) {
			x[0] = 0;
		}			
		if(x[0]<0) {
			x[0] = SCREEN_WIDTH;
		}
		if(y[0]>SCREEN_HEIGHT-UNIT_SIZE) {
			y[0] = 0;
		}
		if(y[0]<0) {
			y[0] = SCREEN_HEIGHT;
		}	
		if(running==false) {
			timer.stop();
		}	
	}
	
	public void checkBait() {
		
		if(baitX==x[0] && baitY==y[0]) {
			body++;
			baitEaten++;
			newBait();
		}
		
		switch(baitEaten) {
			case 5:
				DELAY = 80;
				break;
			case 10:
				DELAY = 70;
				break;
			case 15:
				DELAY = 60;
				break;
			case 20:
				DELAY = 50;
				break;
			case 25:
				DELAY = 40;
				break;
			case 30:
				DELAY = 30;
				break;
			case 35:
				DELAY = 20;
				break;
		}
		timer.setDelay(DELAY);
	}
	
	public void gameOver(Graphics g) {
		g.setColor(Color.blue);
		g.setFont(new Font("Ink Free", Font.BOLD, 50));
		FontMetrics metrics= getFontMetrics(g.getFont());
		g.drawString("GAME OVER", (SCREEN_WIDTH-metrics.stringWidth("GAME OVER"))/2, SCREEN_HEIGHT/2);
	}	
	
	public void actionPerformed(ActionEvent a) {
		if(running) {
			move();
			checkBait();
			checkCollision();
		}
		repaint();	
	}
	
	public class MyKeyAdapter extends KeyAdapter{
		@Override
		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if(direction!='R') {
					direction='L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if(direction!='L') {
					direction='R';
				}
				break;
			case KeyEvent.VK_UP:
				if(direction!='D') {
					direction='U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if(direction!='U') {
					direction='D';
				}
				break;
			}
		}
	}
}
